To implement authentication , we need :
    1.passport.js ---> Middleware to perform authentication
    2.Stratergy ---> To login with a 3rd party authenticator like google or facebook , we need to call function '.Stratergy' of passport.js
    3. Session Managment ---> We have to manage Session
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
1.Download following  :
    passport ,  express-session , passport-google-oauth20 ,  passport-facebook ,  passport-linkedin-oauth2

2.Set Up Google OAuth Credentials
    Go to Google Cloud Console
    Create a new project
    Navigate to APIs & Services > Credentials
    Click Create Credentials > OAuth client ID
    Choose Web application
    Set:
        Authorized redirect URI: http://localhost:3000/auth/google/callback
        Authorized JavaScript origins: http://localhost:3000
    Note the Client ID and Client Secret

3.Set GOOGLE_CLIENT_ID , GOOGLE_CLIENT_SECRET & SESSION_SECRET in '.env' file.

4.Import specific authentication strategies.
5.Serialize & deserialize the user.
6.Configure stratergies.
7.Manage sessions in controller.

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Why do we need serializeUser and deserializeUser in Passport.js?

When a user logs in using Google, Facebook, LinkedIn, etc., the server needs to:
üî• Remember that user across multiple HTTP requests.
üß† HTTP is "stateless" ‚Äî meaning every request is independent unless we manually maintain a session.

Passport.js solves this by using sessions.
serializeUser: Tells Passport what part of the user information to save in the session (cookie).
deserializeUser: Tells Passport how to get the full user information back from the session data on every request.

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

üß™ What are the Parameters of serializeUser and deserializeUser?

1. serializeUser(user, done)
        user: Full user object that came from Google/Facebook/LinkedIn after successful login.
        done: Callback to say "I'm done serializing".
    CODE :  
            passport.serializeUser((user, done) => {
                done(null, user.id);  
            });
    Here :
        You pick user.id (or anything unique) to save into the session cookie.
        null means "no error".

    ‚úÖ After serialization, session contains just something like { userId: '123456' }.

2. deserializeUser(id, done)
        id: This is the user.id we earlier saved inside the session.
        done: Callback to say "I'm done deserializing".

    CODE :  
            passport.deserializeUser((id, done) => {
            User.findById(id)
                .then(user => {
                done(null, user);
                })
                .catch(err => {
                done(err, null);
                });
            });
    Here:
        You look up the user in your database using the id.
        Then you send the full user object back.
        done(null, user) means "no error, here's the full user".

    ‚úÖ Now Passport knows who the user is on every request without asking Google/Facebook/LinkedIn again.

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

üîç Now, let's explain parameters inside (accessToken, refreshToken, profile, done):

Parameter	Data Type	Meaning	Why It's Used
accessToken	String	A token that allows you to access Google's APIs (like Gmail, Calendar, etc.) on behalf of the user.	If you want to fetch extra user info (e.g., emails, contacts), you need this token.
refreshToken	String	A token to get a new accessToken after the old one expires (accessTokens expire after a short time).	Useful if your app needs long-term access to user's Google data without asking them to login again.
profile	Object	Basic information about the user (name, email, profile photo, Google ID, etc.).	You use this to create or find a user in your database.
done	Function	Callback function to signal that Passport should continue.	You call done(error, userObject) to pass the user data to Passport, or error if something went wrong.
üéØ So, what‚Äôs happening step-by-step?
After the user signs in with Google, Google sends:

AccessToken

RefreshToken

User profile

You (developer) get access to these values in the callback.

You usually:

Check if user exists in your database.

If not, create a new user.

Then call done(null, user) to tell Passport: ‚ÄúAuthentication succeeded!‚Äù

REFER PARAMETERS.PNG

--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

