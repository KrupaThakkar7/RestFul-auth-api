## âœ… 1. **Validator Middleware for Password Reset**

```js
const { check, validationResult } = require('express-validator');
```

- **Purpose**: Import the functions we need from `express-validator`.
  - `check()`: Used to apply validation/sanitization rules to specific fields.
  - `validationResult()`: Used to collect and return errors if any exist.

---

```js
const validateResetPassword = [
```

- **Purpose**: We're exporting an **array of middlewares** that will be applied to the route.
- Each `check()` is a middleware, and we'll also add a final custom middleware to handle the errors.

---

```js
  check('email')
    .isEmail().withMessage('Invalid email format')
    .normalizeEmail()
    .trim()
    .escape(),
```

- `check('email')`: Targeting the `email` field in `req.body`.
- `.isEmail()`: Checks if the value is a valid email.
- `.withMessage(...)`: Custom error message if `isEmail()` fails.
- `.normalizeEmail()`: Converts emails to canonical format (like removing dots in Gmail).
- `.trim()`: Removes leading/trailing whitespace.
- `.escape()`: Escapes HTML characters to prevent XSS (like turning `<` into `&lt;`).

---

```js
  check('password')
    .isLength({ min: 6 }).withMessage('Old password must be at least 6 characters')
    .trim()
    .escape(),
```

- Targets the old password field.
- `.isLength({ min: 6 })`: Ensures the password has at least 6 characters.
- `.trim()`, `.escape()`: Clean and sanitize the password input.

---

```js
  check('newPassword')
    .isLength({ min: 8 }).withMessage('New password must be at least 8 characters')
    .not().equals('password').withMessage('New password should not be "password"')
    .trim()
    .escape(),
```

- Targets `newPassword`.
- `.not().equals('password')`: Prevents users from using `"password"` as their new password (common weak password).
- `.trim()`, `.escape()`: Clean up the input.

---

```js
  // Middleware to catch validation errors
  (req, res, next) => {
    const errors = validationResult(req);
```

- This is a custom middleware added at the end of the array.
- `validationResult(req)`: Collects the result of all the previous validations.
- `errors` contains any validation failures.

---

```js
    if (!errors.isEmpty()) {
      return res.status(422).json({ errors: errors.array() });
    }
```

- If there are **any errors**, return them immediately with `422 Unprocessable Entity`.
- `errors.array()` gives a neat array of objects like `{ param: 'email', msg: 'Invalid email format', ... }`

---

```js
    next();
  }
];
```

- If there are **no errors**, proceed to the next middleware or route controller (`resetPassword` in your case).

---

```js
module.exports = validateResetPassword;
```

- Exports the middleware so it can be used in your route file.


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------


